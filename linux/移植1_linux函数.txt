linux系统移植 刘刚
B站【北京迅为】嵌入式学习之Linux系统编程篇
linux移植步骤：
搭建交叉编译环境
bootloader移植
kernel配置编译移植
根文件系统制作
设备驱动开发
总结参考地址 
https://mp.weixin.qq.com/s/UtNdbWtASYNu_dAWOJ80AQ

内核态和用户态
系统调用和用户接口
已安装的系统调用
/usr/include/bits/syscall.h
系统调用的处理过程
用户态函数、系统函数调用表映射、系统调用服务

应用程序编程
文件IO、多进程、多线程、网络SOCKET、时间函数文件系统、用户管理内存管理
系统调用接口和标准接口
open()、read()、write()、ioctl()、close()
fopen()、fread()、fwrite()
文件IO五种模型：阻塞、非阻塞、信号、多路复用、异步
多进程模型：创建、就绪、运行、阻塞、退出
fork()分出子进程函数，会复制父进程资源
进程间通信：管道、信号、信号量、消息队列、共享内存、socket
pthread_create()生成子线程、共享本进程资源和全局变量
线程同步：互斥锁、条件变量、读写锁、信号量
socket是一个标准的网络编程接口

驱动演变
原始框架v2.4：手动设备节点，mknod()、register_chrdev()、file_operations()
平台总线v2.6：自动设备节点
设备树v3.1：设备树

文件目录
bin：系统启动时的可执行命令，一般用户只有可执行权限root用户有可读写权限
boot：存放bootloader相关文件
cdrom：光盘目录
dev：设备驱动文件
etc：系统配置文件，root用户可读写
home：用户的主目录
lib、lib64:各种库文件和系统的支持文件
media：存放媒体文件
mnt：设备挂载位置，如U盘
opt：三方文件
proc：存放系统信息和进程信息
root：root用户的主目录
run：系统的运行信息
sbin：系统管理员的可执行文件
snap：snap应用框架的程序文件
srv：存放系统存储服务相关数据
sys：系统的设备和文件层次信息
temp：临时文件
usr：和用户相关的文件
var：动态文件
文件系统程序
linux必须挂载文件系统，用来管理和存储文件
常见系统：ext3、ext4、proc、sysfs 
df -T 查看文件系统类型
file命令查看文件类型运行平台
挂载命令：mount 和 umount
磁盘分区命令：fdisk 格式化：mkfs
7zip软件可以压缩成linux支持的.tar.bz2，tar是打包，bz2是压缩
gzip命令可以压缩成.gz格式，
gzip xxx        //压缩
gzip -d xxx.gz  //解压缩
bzip命令可以压缩成.bz2格式,
bzip2 -z xxx    //压缩
bzip2 -d xxx.bz2//解压缩
tar命令为打包命令,
tar -vcf test test.tar //将test打包为test.tar
tar -vxf test.tar      //解包
tar -vcjf//bz2压缩
tar -vczf//gzip压缩
Linux打包和压缩是分开的
rar命令
rar x xxx.rar  //解压缩
rar a xxx.rar xxx //压缩
zip命令
zip -rv xxx.zip xxx//压缩
unzip -v xxx.zip ///解压缩
文件类型：-普通文件、d目录文件、b块设备、c字符设备、s套接字、p管道文件、l链接文件
链接文件
inode
ln命令
软链接（快捷方式）（要使用绝对路径cp -d <从哪> <到哪>）
ln -s <源文件> <快捷方式名>
硬链接（文件的表现）



Linux C
一切皆文件
文件输入输出出有文件IO和标准IO之分

文件IO函数
man 2 open
open()
#include <sys/types.h>
#include <sys/stat.h>
#Include <fcntl.h> 
int fd;
fd =  open("a.c",O_CREAT|O_RDWR,0666);//文件路径，操作权限，文件权限=自定义权限&~umask umask查看允许授权权限 creat与文件权限是一套
if(fd<0){printf("open is error\n");return 0;}//失败
printf("open is success\nfd is %d\n",fd);return 0;//成功则文件描述符从3开始 0、1、2为标准的输入、输出、错误
 
close()
#include<unistd.h>
int close(int fd);

read()
#include<unistd.h>
ssize_t read(int fd, void * buf, size_t count);

write()
#include<unistd.h>
ssize_t write(int fd, const void * buf, size_t count);


文件数据指针位置设置
#include <sys/types.h>
#include<unistd.h>
off_t lsdeek(int fd, off_t offset,int whence);//offset偏移量，whence位置基点：SEEK_SET文件开头，SEEK_CUR当前读写位置，SEEK_END文件末尾；返回从头起的偏移量


目录IO
mkdir创建目录
#include <sys/types.h>
#include <sys/stat.h>
int mkdir(const char * pathname, mode_t mode);//创建文件路径，文件权限
#Include <fcntl.h> 
#include <sys/stat.h>
int mkdirat(int dirfd, const char *pathname, mode_t mode);

opendir
#include <sys/types.h>
#include <dirent.h>
DIR *opendir(const char *name);

closedir
#include <sys/types.h>
#include <dirent.h>
int closedir(DIR *dirp);

readdir
#include <dirent.h>
struct dirent *readdir(DIR *dirp);//ls -i查看目录号码
用法举例：查看目录列表
#include <sys/types.h>
#include <dirent.h>
int main(int argc, char * argv[]){
int ret;
DIR *dirp;
struct dirent *readdirp;//
if(argc!=2){//参数错误
printf("Usage %s <name file>\n",argv[0];return -1;}
dirp = opendir(argv[1]);
if(dirp==NULL){
printf("opendir error\n");
return -2;}
printf("opendir success\n");
while(1){
readdirp =readdir(dirp);
if(readdirp==NULL){
printf("readdir empty\n");
break;}
printf("filename %s\n",readdirp ->d_name );
}
closedir(dirp);
return 0;}

Linux C的库
静态库
以lib开头，以.a结尾
制作步骤：
1.库源代码
文件xxname.c：
#include<stdio.h>
void mylib(void);
void mylib(){
printf("thisistest\n");}
2.生成.o文件
gcc -c xxname.c
3.使用ar命令创建静态库
ar cr libxxname.a xxname.o
libxxname.a为库文件名；xxname为库名
4.使用库
文件test.c：
#include<stdio.h>
void mylib(void);
int main(void){
mylib();
return 0;}
gcc test.c -lxxname -L . 
执行它

动态库（共享库）
以lib开头，以.so结尾
制作步骤：
1.库源代码
文件xxname.c
2.生成.o文件
gcc -c -fpic xxname.c
3.使用gcc命令创建动态库
gcc -shared -o libxxname.so xxname.o
4.使用库
gcc test.c -lxxname -L .
执行时不成功，因为系统默认动态库在/lib或/usr/lib文件夹
解决一：复制库文件到系统库文件夹内
解决二：添加环境变量 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/test (此为一次性的环境变量)
解决三：修改/etc/ld.so.conf文件，添加动态库路径，使用ldconfig命令更新目录
执行它，成功


进程
运行中的程序：就绪、执行、阻塞
ID 唯一标识符pid
进程间通信：管道，信号，IPC（共享内存、消息队列，信号灯）、socket
进程控制
创建子进程
#include<unistd.h>
pid_t fork(void);//分叉进程函数从当前进程复制（不是共享）一个子进程，父进程返回子进程PID，子进程返回0，失败返回负值
getpid();//获得当前pid
getppid();//获取父进程pid
特点：
PID不一样
子进程从fork()开始执行
执行的先后顺序不一定


exec函数族（6个）
只为本进程用，则将本进程换为另一套程序
与fork连用可以子进程名义开启另一个程序
#include<unistd.h>
int execl(const char * path, const char *arg, .../*(char*)NULL*/);
execl("/home/hello", "proname",NULL);//程序路径，进程名，必须的NULL
exit(1);

ps命令
ps aux
用来显示当前进程状态

kill命令
杀死进程
kill -9 <PID> 给PID发出杀死信号
kill -l 查看信号


孤儿进程：父进程结束，子进程未结束的子进程，会被系统的init进程领养
僵尸进程：子进程结束，父进程没结束但不释放进程控制块的子进程，

wait函数确保子进程执行完父进程将其回收
#include<sys/wait.h>
pid_t wait(int *status);//成功则返回子进程pid，会阻塞自己
宏定义：WIFEXITED，子进程正常退出则宏为真；WEXITSTATUS(status),子进程正常退出则宏为子进程的退出值
用法举例：
//父进程回收
if( son_pid>0 ){
	int status;
	wait( &status );//阻塞父进程
	if( WIFEXITED(status) ){
		printf("return value is %d\n",WEXITSTATUS(status));
	}
}
//子进程等待结束
if(son_pid == 0){
sleep(2);
printf("This is child\n");
exit(6);
}
//程序结束
return 0;



守护进程
运行在后台
不与任何控制终端关联
必须作为init进程的子进程
不与控制终端交互
创建步骤：
1.fork函数创建子进程
exit函数退出父进程
2.setsid函数创建新会话
//以下为非必须
3.chdir更改当前工作目录
4.重设umask文件掩码
5.关闭文件描述符：0、1、2
6.执行所需程序（这是必须的）
用法举例：
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
int main(void){
pid_t pid;
//步骤一
pid=fork();
if(pid>0)
exit(0);

if(pid==0)
{
//步骤二
setsid();
//步骤三
chdir("/");
//步骤四
umask(0);
//步骤五
close(0);close(1);close(2);
//步骤六
while(1){}
}
return 0;}


进程间通信
管道
无名管道
条件是父子进程关系
#include<unistd.h>
int pipe(int pipefd[2]);//创建管道（得到的读写描述符）
//在fork之前创建
用法举例：
pid_t pid;
int fd[2];
char buf[32]={0};
printf("first fd:%d\nsecond fd:%d\n",fd[0],fd[1]);//输出3、4
pipe(fd);
pid=fork();
if(pid>0){//父进程
int status;
close(fd[0]);//关闭读
write(fd[1],"hello",5);
close(fd[1]);//关闭写
wait(&status);
exit(0);
}
if(pid==0){
close(fd[1]);//关闭写
read(fd[0],buff,32);
printf("buf's %s\n",buf);
close(fd[0]);//关闭读
exit(0);
}

有名管道
man 3 mkfifo
man 1 mkfifo
在文件系统内创建管道文件
#include <sys/types.h>
#include <sys/stat.h>
int mkfifo(const char *pathname, mode_t mode);//文件位置及名称，用户权限
在fork之前定义
附：检查进程是否可调用文件函数
#include<stdio.h>
#include<unistd.h>
int access(const char * pathname, int mode);//文件位置及名称,测试操作的模式
//返回值：成功 0 失败 -1 errno ：EINVAL模式值无效，EACCES不可访问，EIO输入输出错误，等等；
//mode ：R_OK W_OK X_OK F_OK，测试读、写、执行、文件存在。

信号通信
kill -l 命令查看信号
1.信号的发送
kill函数
#include<sys/types.h>
#include<signal.h>
int kill(pid_t pid, int sig);

raise函数（自己给自己发送）
#include<signal.h>
int raise(int sig);
raise函数等价于kill(getpid(),sig);
用法举例：raise(9);//SIGKILL不能被捕获的进程终止信号

alarm函数（定时终止）
#include<unistd.h>
unsigned int alarm(unsigned int seconds );

2.信号接收需要程序是进程状态，即运行程序
while
sleep()
int pause(void);//只返回-1
都可以使进程保留

3.信号处理：系统默认（大部分是终止），忽略，捕获（自定义处理）
signal函数
#include<signal.h>
typedef void(*sighandler_t)(int);//int为参数一信号
sighandler_t signal(int signum, signhandler_t handler);
//参数一signum：kill -l信号表中的信号
//参数二handler：处理方式系统默认（大部分是终止），忽略，捕获（自定义处理）：SIG_DFL、SIG_IGN、myfunctionPoint
//ctrl+c产生SIGINT信号


共享内存
shmget函数创建共享内存
#include<sys/ipc.h>
#include<sys/shm.h>
int shmget(key_t key, size_t size, int shmflg);
//参数一key：IPC_PRIVATE或ftok函数返回，区别在于共享内存的key值不同
//参数二size：共享内存的大小
//参数三shmflg：权限
//返回值：成功 共享内存标识符，失败 -1
附：IPC_PRIVATE宏 系统默认分配key值
ftok函数
（建立IPC通信需要唯一key，所以生成以自定义proj_id和文件索引节点的key值；
文件索引节点在系统内是唯一的，所以必须是存在且可访问的文件）
#include<sys/types.h>
#include<sys/ipc.h>
key_t ftok(const cahr * pathname, int proj_id);//文件路径及名称，1~255
//注：ftok函数需要参数三权限shmflg设置为 IPC_CREAT|0777
ipcs -m命令查看共享内存ipcrm -m <shmid>删除<shmid>共享内存

共享内存的使用
共享内存实现方式是映射的方式，效率最高
shmat函数（映射地址）
#include<sys/shm.h>
#include<sys/types.h>
void *shmat(int shmid, const void *shmaddr, int shmflg);
//参数一shmid：共享内存标识符，shmget函数返回值
//参数二*shmaddr：映射到的地址，一般写NULL，系统默认
//参数三shmflg：通常为0，本次的操作权限可读可写，SHM_RDONLY只读
//返回值：成功 共享内存映射到进程中的地址，失败 -1

shmdt函数（删除映射）
#include<sys/shm.h>
#include<sys/types.h>
int shmdt( const void *shmaddr );
//参数*shmaddr：映射到的地址
//返回值：成功 0，失败 -1
shmctl函数（删除内核里的共享内存）
#include<sys/shm.h>
#include<sys/ipc.h>
int shmctl(int shmid, int cmd, struct shmid_ds *buf):
//参数一shmid：要操作的共享内存标识符
//参数二cmd：IPC_STAT（获取对象属性）、IPC_SET（设置对象属性）、IPC_RMID（删除对象）
//参数三*buf：IPC_STAT（获取对象属性）、IPC_SET（设置对象属性）时的传入或传出的数据
//返回值：成功 0，失败 -1

共享内存用法举例：
int main(void){

int shmid;
key_t key;
pid_t pid;
char *s_addr,*p_addr;


key =ftok("./a.c",'a');
shmid=shmget(key,1024,0777|IPC_CREAT);//创建内存
if(shmid<0){//失败
printf("shmget is error\n");
return -1;
}
printf("shmget is ok and shmid is %d \n",shmid);


pid =fork();//创建子进程
if(pid>0){//父
p_addr = shmat(shmid, NULL, 0);//映射
strncpy(p_addr, "hello",5);
wait(NULL);//回收子进程
exit(0);
}
if(pid==0){//子
sleep(2);
s_addr =shmat(shmid,NULL,0);
printf("son receive s_addr is \n%s\n", s_addr);
exit(0);
}

return 0;
}




消息队列
1.创建或打开
msgget函数
#include<sys/types.h>
#include<sys/ipc.h>
#include<msg.h>
int msgget(key_t key,int msgflg);
//参数：
//key：消息队列key值
//msgflg：操作权限
//返回值：成功 消息队列ID，失败 -1

2.删除
msgctl函数
#include<sys/types.h>
#include<sys/ipc.h>
#include<msg.h>
int msgctl(int msqid, int cmd, struct msqid_ds *buf):
//参数：
//shmid：要操作的消息队列ID
//cmd：IPC_STAT（获取队列属性，存到buf）、IPC_SET（设置队列属性，取自buf）、IPC_RMID（删除队列，buf=NULL）
//*buf：缓冲区
//返回值：成功 0，失败 -1

3.操作
msgsnd函数（写消息队列）
#include<sys/types.h>
#include<sys/ipc.h>
#include<msg.h>
int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
//参数：
//msqid：消息队列ID
//*msgp：消息类型指针，下文为消息结构
//msgsz：发送的消息内容字节数
//msgflg：阻塞式 0， IPC_NOWAIT 非阻塞式
//返回值：成功 0，失败 -1
消息类型结构体：
struct msgbuf{
long mtype;//消息的类型
char mtext[1];//消息的内容
};

msgrcv函数（读消息队列）
#include<sys/types.h>
#include<sys/ipc.h>
#include<msg.h>
ssize_t msgrcv(//返回值：成功 消息的长度，失败 -1
int msqid,//消息队列ID
void *msgp,//接收消息的缓冲区
size_t msgsz,//接收消息的字节数
long msgtyp,//接收消息的标识，0，第一个消息
int msgflg);//阻塞读取 0，非阻塞读取 IPC_NOWAIT



ipcs -q命令查看消息队列

消息队列用法举例：
a.c文件：
struct msgbuf{
long mtype;
char mtext[128];
};
int main(void){
//数据段
int msgid;
key_t key;
struct msgbuf msg;
pid_t pid;

//初始化创建
key = ftok("./a.c",'a');//a.c为本程序文件
msgid=msgget(key,0666|IPC_CREAT);

if(msgid<0){
printf("msgget is error\n");
return -1;
}
printf("msgget is ok and it's %d\n",msgid);


//程序操作

//a.c独立程序
msg.mtype=1;
strncpy(msg.mtext,"hello",5);
msgsnd(msgid, &msg, strlen(msg.mtext),0);

return 0；}

b.c文件：
struct msgbuf{
long mtype;
char mtext[128];
};
int main(void){
//数据段
int msgid;
key_t key;
struct msgbuf msg;
pid_t pid;

//初始化创建
key = ftok("./a.c",'a');//a.c为本程序文件
msgid=msgget(key,0666|IPC_CREAT);

if(msgid<0){
printf("msgget is error\n");
return -1;
}
printf("msgget is ok and it's %d\n",msgid);


//程序操作

//b.c独立程序
msgrcv(msgid, (void*)&msg, 128, 0, 0);
printf("msg is\ntype: %d \ncontent: %s\n",msg.mtype,msg.mtext);

return 0；}


信号量
给资源计数用的，进程顺序的同步VP或资源的互斥PV用的
1.创建
semget函数（获得信号量的ID）
#include<sys/tpyes.h>
#include<sys/ipc.h>
#include<sem.h>
int semget(//返回值：成功 信号量ID，失败 -1
key_t key;//信号量的键值，可由ftok函数
int nsems,//信号量的数量
int semflg);//赋予操作权限
2.设置
semctl函数（操作）
#include<sys/tpyes.h>
#include<sys/ipc.h>
#include<sem.h>
int semctl(//返回值：成功 0，失败 -1
int semid, //信号量id
int semnum, //信号量编号
int cmd, //IPC_STAT（获取信号量属性）、IPC_SET（设置信号量属性）、IPC_RMID（删除信号量）、SETVAL（设置信号量值）
union semun arg);//IPC_STAT（获取信号量属性）、IPC_SET（设置信号量属性）时为buf，SETVAL（设置信号量值）时为val
设置时的共用体
union semun{
int val;
struct semid_ds *buf;
unsigned short *array;
struct seminfo *_buf;};
3.使用
semop函数（P、V操作）
#include<sys/tpyes.h>
#include<sys/ipc.h>
#include<sem.h>
int semop(//
int semid, //信号量ID
struct sembuf *sops, //信号量结构体数组
size_t nsops);//要操作的信号量的数量
结构体
struct sembuf{
unsigned short sem_num;//要操作的信号量的编号
short sem_op;//PV操作，-1 P分配资源，1 V释放资源，0 信号量空闲
short sem_flg;//阻塞 0，非阻塞 IPC_NOWAIT
};

用法举例：进程同步
union semun{
int val;
struct semid_ds *buf;
unsigned short *array;
struct seminfo *_buf;};

struct sembuf{
unsigned short sem_num;//要操作的信号量的编号
short sem_op;//PV操作，-1 P分配资源，1 V释放资源，0 信号量空闲
short sem_flg;//阻塞 0，非阻塞 IPC_NOWAIT
};
int main(){
//数据段
int semid;
int key;
union semun semun_union;
pid_t pid;
struct sembuf sem;
//初始化创建
key=ftok("./a.c",'a');
semid=semget(key, 1, 0666|IPC_CREAT);//信号量资源有一个
semun_union.val=0;
//程序操作
semctl(semid, 0, SETVAL, semun_union);//设置信号量编号为0
pid=fork;
if(pid>0){//父等子先
sem.sem_num=0;//配对编号为0
sem.sem_op=-1;
sem.sem_flg=0;
semop(semid, &sem, 1);//P操作，阻塞
printf("father behind\n");
wait(NULL);
exit(0);
}
if(pid==0){//子先与父
sem.sem_num=0;//配对编号为0
sem.sem_op=1;
sem.sem_flg=0;
semop(semid, &sem, 1);//V操作，阻塞
printf("son before\n");
exit(0);
}

//回收与退出
return 0;
}






















