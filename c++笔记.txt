C++的用法
抽象，继承，多态，封装
对应关键字

重点：类 与 重载

存储类修饰符
static 存储类
定义：限定变量作用域于声明其的文件内，或修饰局部变量在函数调用时保持其值，相当于全局变量

extern 存储类
定义：声明在其他文件内，在其他文件内引用本文件全局变量，

mutable 存储类
定义：仅适用于类的对象，具有mutable性质的类的数据成员打破了类对象的const限定，许修改类的mutable的数据成员，即便类的其它成员仍然是const只读属性

thread_local 存储类
定义：线程变量，随线程的建与销，而分配与回收


指针
定义：变量地址
声明形式：type *var-name;//type，变量类型；var-name，变量指针名；
用法：一元运算符 * 来返回位于操作数所指定地址的变量的值


空指针
定义：没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯
用法举例：int  *ptr = NULL;

指针运算
定义：加，减，比较

多级指针
定义：指向指针的指针等
用法举例：
{   int  var;
    int  *ptr;
    int  **pptr;}
 

指针与数组的关系
定义：数组名相当于常指针，(一维数组，一级指针)
用法举例：{int  var[MAX] = {10, 100, 200};
   int  *ptr;
   ptr = var;}
{*(var + 2) = 500;}


指针数组
定义：指针型数组，用数组存指针，（二维数组，二级指针）
用法举例：{
int *ptr[MAX];
}{
 const char *names[MAX] = {
                   "Zara Ali",
                   "Hina Ali",
                   "Nuha Ali",
                   "Sara Ali",  };
}
数组指针
定义：指向数组的指针，用指针指向数组，（二维数组，二级指针）
用法举例：{int (*p)[10]; p即为指向数组的指针}
{int a[3][4]={1,2,3,4,5,6,7,8,9,10,11,12};
int (*p)[4];
p=(int(*)[4])a;
for(int i=0;i<3;i++)
{
    for(int j=0;j<4;j++) printf("%d",p[i][j]); //或者 *（*（p+i）+j） 或者 *（p[i]+j）
    printf("\n");
}
}

指针型形参
用法：指针，数组通用，但数组得带上大小。而系统只为参数开辟一个存放地址的存储单元
用法举例：(一维数组，一级指针)double getAverage(int *arr, int size);//
（二维数组，二级指针）fun(int (*a)[n]);fun(int a[][n]);fun(int a[m][n]);
fun(int *a[m]);fun(*a[]);fun(**a);



返回指针型函数（指针函数）
用法举例：int * myFunction()

函数指针
定义：函数的指针变量
用法举例：
{
int Max(int, int);  //函数声明
int(*p)(int, int);  //定义一个函数指针
p = Max;  //把函数Max赋给指针变量p, 使p指向Max函数
}



引用
定义：变量的别名
声明形式：int&  r = i;
用法：不存在空引用，引用必须连接到一块合法的内存；
一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象；
引用必须在创建时被初始化。指针可以在任何时间被初始化。


Lambda 函数与表达式
定义：匿名函数，可限制外部参数的读写形式的直接定义的函数
声明形式：[ capture ] ( params ) opt -> ret { body; };//其中 capture 是捕获列表，params 是参数表，opt 是函数选项，ret 是返回值类型，body是函数体。
auto func = [capture] (params) opt -> ret { func_body; };// func 是可以当作 lambda 表达式的名字，作为一个函数使用，capture 是捕获列表，params 是参数表，opt： 不需要可以省略。， ret 是返回值类型，func_body 是函数体。
用法：（https://en.cppreference.com/w/cpp/language/lambda
https://blog.csdn.net/asdasdde/article/details/116268964
http://c.biancheng.net/view/3741.html#:~:text=lambda%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%9C%A8%20C%2B%2B11%20%E4%B8%AD%E8%A2%AB%E7%A7%B0%E4%B8%BA%E2%80%9C%E9%97%AD%E5%8C%85%E7%B1%BB%E5%9E%8B%EF%BC%88Closure%20Type%EF%BC%89%E2%80%9D%E3%80%82.%20%E5%AE%83%E6%98%AF%E4%B8%80%E4%B8%AA%E7%89%B9%E6%AE%8A%E7%9A%84%EF%BC%8C%E5%8C%BF%E5%90%8D%E7%9A%84%E9%9D%9E%20nunion%20%E7%9A%84%E7%B1%BB%E7%B1%BB%E5%9E%8B%E3%80%82.,%5B%5D%20%28int%20a%29%20%7B%20return%20a%3B%20%7D%2C%20123%29%3B）
捕获列表：
[]	不捕捉任何变量
[&]	捕获外部作用域中所有变量，并作为引用在函数体内使用 (按引用捕获)
[=]	捕获外部作用域所有变量，在函数内内有个副本使用,拷贝的副本在匿名函数体内部是只读的
[=,&foo]	按值捕获外部作用域中所有变量，并按照引用捕获外部变量 foo
[bar]	按值捕获 bar 变量，同时不捕获其他变量
[&bar]	按引用捕获 bar 变量，同时不捕获其他变量
[this]	捕获当前类中的 this 指针,让 lambda 表达式拥有和当前类成员函数同样的访问权限,如果已经使用了 & 或者 =, 默认添加此选项
用法举例：{
auto f = [](int a) -> int { return a + 1; };
std::cout << f(1) << std::endl;  // 输出: 2
}
{
类成员 m_number为捕获值
oid output(int x, int y)
    {
        //auto x1 = [] {return m_number; };                     //错误，没有捕获外部变量，不能使用类成员 m_number error
        auto x2 = [=] {return m_number + x + y; };             // ok正确，以值拷贝的方式捕获所有外部变量
        auto x3 = [&] {return m_number + x + y; };             // ok正确，以引用的方式捕获所有外部变量
        auto x4 = [this] {return m_number; };                  // ok正确，捕获 this 指针，可访问对象内部成员
        //auto x5 = [this] {return m_number + x + y; };          // error错误，捕获 this 指针，可访问类内部成员，没有捕获到变量 x，y，因此不能访问。
        auto x6 = [this, x, y] {return m_number + x + y; };    // ok正确，捕获 this 指针，x，y
        auto x7 = [this] {return m_number++; };                // ok正确，捕获 this 指针，并且可以修改对象内部变量的值
    }

}
匿名函数
Lambda 表达式的定义形式如下：
[外部变量访问方式说明符] (参数表) -> 返回值类型
{
   语句块
}
外部变量访问方式说明符”可以是=或&，
表示{}中用到的、定义在{}外面的变量在{}中是否允许被改变。
=表示不允许，&表示允许。
当然，在{}中也可以不使用定义在外面的变量。“-> 返回值类型”可以省略。
[=, &x, &y]表示外部变量 x、y 的值可以被修改，其余外部变量不能被修改；
[&, x, y]表示除 x、y 以外的外部变量，值都可以被修改。

lambda 表达式还可以通过捕获列表捕获一定范围内的变量：
[] 不捕获任何变量。
[&] 捕获外部作用域中所有变量，并作为引用在函数体中使用（按引用捕获）。
[=] 捕获外部作用域中所有变量，并作为副本在函数体中使用（按值捕获）。
[=，&foo] 按值捕获外部作用域中所有变量，并按引用捕获 foo 变量。
[bar] 按值捕获 bar 变量，同时不捕获其他变量。
[this] 捕获当前类中的 this 指针，让 lambda 表达式拥有和当前类成员函数同样的访问权限。如果已经使用了 & 或者 =，就默认添加此选项。捕获 this 的目的是可以在 lamda 中使用当前类的成员函数和成员变量。

外部变量访问方式说明符：匿名函数使用外部变量时的调用方式，也可称其为捕获列表；
=是以复制的形式调用，&是以引用的形式调用
需要修改按值捕获的外部变量时，使用mutable关键字指明：
int a = 0;
auto f1 = [=]{ return a++; };             // error，修改按值捕获的外部变量
auto f2 = [=]() mutable { return a++; };  // OK，mutable



随机数
用法：
// 设置种子
   srand( (unsigned)time( NULL ) );
// 生成实际的随机数
   j= rand();

类与对象
定义：一种数据结构，包含变量与函数（方法），类为对象的蓝图，对象是描述事物的变量
类的访问修饰符
定义：区分外部调用的访问权限
用法：在类的主体内，用关键字public、private、protected声明类的主体区域；如果不声明，则默认类的主体区域是 private 。关于访问权限的继承
用法举例：
{
class Base {
 
   public:
 
  // 公有成员
 
   protected:
 
  // 受保护成员
 
   private:
 
  // 私有成员
 
};
}
类的静态成员
定义：一类对象共有的，通用的，静态变量和静态函数，也可以认为冠了类名的普通函数
静态变量
用法：用关键字static声明，对象间共享的变量，类的定义不能初始化静态变量，可用可以在类的外部通过使用范围解析运算符 :: 来重新声明静态变量从而对它进行初始化
静态成员函数
定义：把函数与类的任何特定对象独立开来
用法：静态成员函数即使在类对象不存在的情况下也能被调用，
静态函数只要使用类名加范围解析运算符 :: 就可以访问。
静态成员函数只能访问静态成员数据、其他静态成员函数和类外部的其他函数。
静态成员函数有一个类范围，他们不能访问类的 this 指针。
没有 this 指针，只能访问静态成员（包括静态成员变量和静态成员函数）。
您可以使用静态成员函数来判断类的某些对象是否已被创建。



构造函数
定义：类的一种特殊的成员函数，它会在每次创建类的新对象时执行
声明形式：在类中：类名（参数）{主体}
用法：构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。构造函数可用于为某些成员变量设置初始值。

析构函数
定义：类的一种特殊的成员函数，它会在每次删除所创建的对象时执行。
声明形式：在类中：~ 类名（参数）{主体}
用法：析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，它不会返回任何值，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。

拷贝构造函数
定义：拷贝构造型构造函数，一种特殊的构造函数，它在创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象
声明形式：在类中：类名( const 类名 &obj) {主体};      // obj 是一个旧对象引用，该对象是用于初始化另一个对象的。
用法：通过使用另一个同类型的对象来初始化新创建的对象。复制对象把它作为参数传递给函数。复制对象，并从函数返回这个对象。
如果在类中没有定义拷贝构造函数，编译器会自行定义一个。如果类带有指针变量，并有动态内存分配，则它必须有一个拷贝构造函数。
拷贝构造函数被自动调用的三种情况： 1.对象初始化时，例，Complex c2(c1);Complex c2 = c1;但在赋值时不引发调用，例，c1=c2;；2.函数实参赋给形参时，但该对象所属的类的复制构造函数是自定义的，外部函数的形参的值在进入函数时是随机的，未必等于实参；3.如果函数的返冋值是类 A 的对象，则函数返冋时，类 A 的复制构造函数被调用
浅拷贝与深拷贝：默认的拷贝构造函数仅仅是进行数据赋值，并不能为指针开辟内存空间，叫浅拷贝；自定义拷贝构造函数不仅可以进行数据的拷贝，也可以为成员分配内存空间，叫做深拷贝



友元
定义：类的友元函数是定义在类外部，但有权访问类的所有私有（private）成员和保护（protected）成员。友元函数不是成员函数。
用法：外部函数，用关键字friend在类中，声明函数：友元函数；声明其他类：友元类；声明其他类的函数;
用法举例：
class Box
{
   friend void printWidth( Box box );
   friend class ClassTwo;
   friend void ClassTwo::setWidth( double wid );
};

内联函数
定义：程序在编译器编译的时候，编译器将程序中出现的内联函数的调用表达式用内联函数的函数体进行替换
用法：用关键字inline声明函数，内联函数一般都是1-5行的小函数
注意事项：
1.在内联函数内不允许使用循环语句和swtich语句；
2.内联函数的定义必须出现在内联函数第一次调用之前；
3.类结构中所在的类说明内部定义的函数是内联函数

this指针
定义：每一个对象都能通过 this 指针来访问自己的地址。this 指针是所有成员函数的隐含参数
用法：this 只能用在类的内部，通过 this 可以访问类的所有成员，包括 private、protected、public 属性的。

类的指针
用法：类的指针与指向结构的指针类似，访问指向类的指针的成员，需要使用成员访问运算符 ->，就像访问指向结构的指针一样。与所有的指针一样，您必须在使用指针之前，对指针进行初始化



继承
定义：创建派生类；
声明形式：clss 类名 : 继承方式 基类名  { 派生主体 }；
多继承：class <派生类名>:<继承方式1><基类名1>,<继承方式2><基类名2>,…{<派生类类体>}；
虚拟继承：class 类名: virtual 继承方式 父类名{}；
用法：
派生类访问基类：
1.公有继承（public）：当一个类派生自公有基类时，基类的公有成员也是派生类的公有成员，基类的保护成员也是派生类的保护成员，基类的私有成员不能直接被派生类访问，但是可以通过调用基类的公有和保护成员来访问。
2.保护继承（protected）： 当一个类派生自保护基类时，基类的公有和保护成员将成为派生类的保护成员。
3.私有继承（private）：当一个类派生自私有基类时，基类的公有和保护成员将成为派生类的私有成员。
继承不包含：
1.基类的构造函数、析构函数和拷贝构造函数。
2.基类的重载运算符。
3.基类的友元函数。
多继承，用逗号隔开，
环状继承，解决派生类继承多个有共同基类的派生类，用virtual声明继承；


重载
定义：作用域内，函数和运算符指定多个定义，即函数重载和运算符重载
用法：重载声明一个与之前函数或方法同名的声明，但参数列表和实现不同；注意不能是只有返回值不同；
选择合适的函数或运算符的过程为重载决策；
重载函数
用法举例：
int put(int c);                    // putchar
int put(int c, FILE *f);           // fputc
int put(char const *s);            // puts
int put(char const *s, FILE *f);   // fputs
重载运算符
带有特殊名称的函数
函数名是由关键字 operator 和其后要重载的运算符符号构成的
声明形式：返回类型 operator运算符(参数表){定义的函数主体}
用法：成员函数和友元函数的运算符重载的区别在于，参数的数量和调用逻辑。
不可重载的运算符列表：
.：成员访问运算符
.*, ->*：成员指针访问运算符
::：域运算符
sizeof：长度运算符
?:：条件运算符
#： 预处理符号
各运算符重载用法：符号：成员函数；友元函数。
加，+：
在类中定义：
// 重载 + 运算符，用于把两个 Box 对象相加
   Box operator+(const Box& b)
   {
      Box box;
      box.length = this->length + b.length;
      box.breadth = this->breadth + b.breadth;
      box.height = this->height + b.height;
      return box;
   } 
使用：
// 把两个对象相加，得到 Box3
Box3 = Box1 + Box2;
//与数字加时，是有顺序的
声明时：
       A operator+(const int b);
friend A operator+(const int b, A obj);
定义时：
A A::operator+(const int b)//重载+号用于  对象与数相加
{
    return A(a+b);
}
A operator+(const int b,  A obj)
{
    return obj+b;//友元函数调用第二个重载+的成员函数  相当于 obj.operator+(b); 
}
使用时：
a4=a1+m;a5=m+a1;
减，-：
乘，*：
除，/：
取模，%：
取值，*：
取地址，&：

正，+：
负，-：
自增，++：
自减，--：



多态
调用成员函数时，会根据调用函数的对象的类型来执行不同的函数
用法：派生类重载基类函数，用virtual声明，使基类函数的定义由静态链接变为动态链接

虚函数
声明形式：virtual 函数类型 函数名(){}
用法：private函数也可被virtual修饰，虚函数的重载性和它声明的权限无关，函数的定义与读取相互独立
纯虚函数
用法举例：      
// pure virtual function
      virtual int area() = 0;
= 0 告诉编译器，函数没有主体，上面的虚函数是纯虚函数



抽象
数据抽象，以函数访问形式，将类中的数据变为只读形式

封装
数据封装，保护数据，对外隐藏，private，友元会破坏封装性

抽象类接口
做为只有纯虚函数的基类定义
只是建立了一个类的框架




C++应用
文件、异常、多线程、网络

异常
throw: 当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的。

try: try 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。
catch: 在您想要处理问题的地方，通过异常处理程序捕获异常。catch 关键字用于捕获异常。

异常处理的结构，共分两部分：

try
{
    //正常程序执行语句
    throw (异常类型表达式);
}

catch(异常类型1)
{
    //异常处理代码
}

catch(异常类型2)
{
    //异常处理代码
}

catch(异常类型3)
{
    //异常处理代码
}
//后续代码
/*代码在执行时，首先遇到try代码块，
作用就是启动异常处理机制，
检测try代码执行中遇到的异常，
然后通过throw进行抛出,
throw当中的异常类型表达式是常量或变量表达式。
接下来会和后面的catch语句块进行匹配（捕获），
然后执行对应的代码。如果没有发现可以匹配的类型则，
则继续向下执行。
如若未找到匹配，
则自动调用terminate（）结束函数，
默认功能是abort（）终止程序*/


文件
需要包含fstream文件
#include<fstream>
新增数据类型：写文件类ofstream,读文件类istream,读写文件类fstream
打开文件方法
void open(const char *filename, ios::openmode mode);
mode可选数据
ios::app	追加模式。所有写入都追加到文件末尾。
ios::ate	文件打开后定位到文件末尾。
ios::in		打开文件用于读取。
ios::out	打开文件用于写入。
ios::trunc	如果该文件已经存在，其内容将在打开文件之前被截断，即把文件长度设为 0。
用法举例：
可以把以上两种或两种以上的模式结合使用。
例如，如果您想要以写入模式打开文件，并希望截断文件，以防文件已存在，那么您可以使用下面的语法：
ofstream outfile;
outfile.open("file.dat", ios::out | ios::trunc );
类似地，您如果想要打开一个文件用于读写，可以使用下面的语法：
ifstream  afile;
afile.open("file.dat", ios::out | ios::in );

关闭文件方法
void close();

写入文件方法
用运算符<<

读取文件方法
用运算符>>

文件位置指针方法
istream::seekg(n, mode)
ostream::seekp(n, mode)
n为long类型移动长度，mode为指定查找方向。查找方向是 ios::beg（默认的，从流的开头开始定位）， ios::cur（从流的当前位置开始定位），ios::end（从流的末尾开始定位）



动态内存的分配
new
从堆中分配大小内存，并返回指针
delete
从指针回收内存

命名空间
代码层次划分区域用，（可与包类比）
在多文件时，设置逻辑上的分区，因为多文件编译后相当于一个文件


模板（泛型机制）
蓝图编程，模板分为函数模板和类模板
用以减少重载的工作量，可理解为另一种重载，
函数模板
template <typename 类型参数1 , typename 类型参数2 , ...> 返回值类型  函数名(形参列表){
    //在函数体中可以使用类型参数
}
typename关键字也可以使用class关键字替代，它们没有任何区别
用法举例：
template<typename T> 
void Swap(T *a, T *b){//实现任意数据的交换
    T temp = *a;
    *a = *b;
    *b = temp;
}
类模板
template<typename 类型参数1 , typename 类型参数2 , …> 
class 类名{
    //TODO:
};
在类外定义成员函数时仍然需要带上模板头，格式为：
template<typename 类型参数1 , typename 类型参数2 , …>
返回值类型 类名<类型参数1 , 类型参数2, ...>::函数名(形参列表){
    //TODO:
}
注意：
定义方法时，除了 template 关键字后面要指明类型参数，类名 Point 后面也要带上类型参数，只是不加 typename 关键字了。另外需要注意的是，在类外定义成员函数时，template 后面的类型参数要和类声明时的一致
例如：
template<typename T1, typename T2>  //模板头
T1 Point<T1, T2>::getX() const /*函数头*/ {//const指明函数为只读形式
    return m_x;
}
template<typename T1, typename T2>
void Point<T1, T2>::setY(T2 y){
    m_y = y;
}
在实例化时，与函数模板不同的是，类模板在实例化时必须显式地指明数据类型，编译器不能根据给定的数据推演出数据类型，
例如，Point<int, float> p2(10, 15.5);Point<char*, char*> *p = new Point<char*, char*>("东经180度", "北纬210度");
赋值号两边都要指明具体的数据类型，且要保持一致

多线程
环境linux,posix
头文件pthread.h
创建线程函数
pthread_create(thread, attr, start_routine, atg)
thread	指向线程标识符指针。
attr	一个不透明的属性对象，可以被用来设置线程属性。您可以指定线程属性对象，也可以使用默认值 NULL。
start_routine	线程运行函数起始地址，一旦线程被创建就会执行。
arg	运行函数的参数。它必须通过把引用作为指针强制转换为 void 类型进行传递。如果没有传递参数，则使用 NULL。
创建线程成功时，函数返回 0，若返回值不为 0 则说明创建线程失败。
终止线程
pthread_exit (status)

c++ 11 标准线程库 <thread>，g++ -std=c++11 test.cpp -lpthread


环境windows
头文件windows.h
创建线程函数
HANDLE WINAPI CreateThread(
    LPSECURITY_ATTRIBUTES   lpThreadAttributes, //线程安全相关的属性，常置为NULL
    SIZE_T                  dwStackSize,        //新线程的初始化栈在大小，可设置为0
    LPTHREAD_START_ROUTINE  lpStartAddress,     //被线程执行的回调函数，也称为线程函数
    LPVOID                  lpParameter,        //传入线程函数的参数，不需传递参数时为NULL
    DWORD                   dwCreationFlags,    //控制线程创建的标志
    LPDWORD                 lpThreadId          //传出参数，用于获得线程ID，如果为NULL则不返回线程ID
);
说明：
lpThreadAttributes：指向SECURITY_ATTRIBUTES结构的指针，决定返回的句柄是否可被子进程继承，如果为NULL则表示返回的句柄不能被子进程继承。
dwStackSize ：线程栈的初始化大小，字节单位。系统分配这个值对
lpStartAddress：指向一个函数指针，该函数将被线程调用执行。因此该函数也被称为线程函数(ThreadProc)，是线程执行的起始地址，线程函数是一个回调函数，由操作系统在线程中调用。线程函数的原型如下：
DWORD WINAPI ThreadProc(LPVOID lpParameter);    //lpParameter是传入的参数，是一个空指针
lpParameter：传入线程函数(ThreadProc)的参数，不需传递参数时为NULL
dwCreationFlags：控制线程创建的标志，有三个类型，0：线程创建后立即执行线程；CREATE_SUSPENDED：线程创建后进入就绪状态，直到线程被唤醒时才调用；STACK_SIZE_PARAM_IS_A_RESERVATION：dwStackSize 参数指定线程初始化栈的大小，如果STACK_SIZE_PARAM_IS_A_RESERVATION标志未指定，dwStackSize将会设为系统预留的值。
返回值：如果线程创建成功，则返回这个新线程的句柄，否则返回NULL。如果线程创建失败，可通过GetLastError函数获得错误信息。
终止线程
BOOL WINAPI CloseHandle(HANDLE hObject);
//关闭一个被打开的对象句柄可用这个函数关闭创建的线程句柄，
如果函数执行成功则返回true(非0),如果失败则返回false(0)，如果执行失败可调用GetLastError.函数获得错误信息。

线程同步、线程互斥
创建一个互斥量函数
HANDLE WINAPI CreateMutex(
    LPSECURITY_ATTRIBUTES lpMutexAttributes,        //线程安全相关的属性，常置为NULL
    BOOL                  bInitialOwner,            //创建Mutex时的当前线程是否拥有Mutex的所有权
    LPCTSTR               lpName                    //Mutex的名称
);
说明： lpMutexAttributes也是表示安全的结构，与CreateThread中的lpThreadAttributes功能相同，表示决定返回的句柄是否可被子进程继承，如果为NULL则表示返回的句柄不能被子进程继承。bInitialOwner表示创建Mutex时的当前线程是否拥有Mutex的所有权，若为TRUE则指定为当前的创建线程为Mutex对象的所有者，其它线程访问需要先ReleaseMutex。lpName为Mutex的名称。

请求一个互斥量锁
DWORD WINAPI WaitForSingleObject(
    HANDLE hHandle,                             //要获取的锁的句柄
    DWORD  dwMilliseconds                           //超时间隔
);
说明： WaitForSingleObject的作用是等待一个指定的对象(如Mutex对象)，直到该对象处于非占用的状态(如Mutex对象被释放)或超出设定的时间间隔。除此之外，还有一个与它类似的函数WaitForMultipleObjects，它的作用是等待一个或所有指定的对象，直到所有的对象处于非占用的状态，或超出设定的时间间隔。

hHandle：要等待的指定对象的句柄。
dwMilliseconds：超时的间隔，以毫秒为单位；如果dwMilliseconds为非0，则等待直到dwMilliseconds时间间隔用完或对象变为非占用的状态，如果dwMilliseconds 为INFINITE则表示无限等待，直到等待的对象处于非占用的状态。

释放互斥锁
BOOL WINAPI ReleaseMutex(HANDLE hMutex);
说明：释放所拥有的互斥量锁对象，hMutex为释放的互斥量的句柄。


多文件编程
作用：模块化
文件类型：
按文件分为
.h 文件：又称“头文件”，用于存放常量、函数的声明部分、类的声明部分；
.cpp 文件：又称“源文件”，用于存放变量、函数的定义部分，类的实现部分。
按结构分
头文件( .h )。放置各种声明，用于被cpp文件包含。
模块文件（.cpp）。放置一些函数定义，也称为功能模块。
主程序文件（.cpp）。包含main()的文件，程序入口，调用模块文件实现的方法。
都叫做源文件，只是为了区分而已，完全可以用一个文件写完程序；分出头文件也是一种保护保密措施；头文件的包含#include<>与""分别系统库的和自定义源文件夹的。

防止头文件重复引用
（1） 使用宏定义避免重复引入，效率低，编译器挨个检查
#ifndef _NAME_H
#define _NAME_H
//头文件内容
#endif
（2）使用#pragma once避免重复引入，效率高，只是避免整体文件的的重复
（3）使用_Pragma操作符，C99标准，#pragma的增强，
添加到相应文件的开头：_Pragma("once")

const常量在多文件的定义
（1）将const常量定义在.h头文件中，/*demo.h*/ const int num = 10;
（2）借助extern先声明再定义const常量，/*demo.h*/ extern const int num;  //声明 const 常量，/*demo.cpp*/ const int num =10;  //定义 .h 文件中声明的 num 常量
（3）借助extern直接定义const常量，/*demo.h*/ extern const int num =10;/*main.cpp*/

用g++命令执行C++多文件项目
预处理、编译、汇编和链接
在执行 C++ 项目时，头文件是不需要经历以上这 4 个阶段的，只有项目中的所有源文件才必须经历这 4 个阶段
（1）预处理阶段，
命令：g++ -E main.cpp -o main.i
其中，-E 选项用于限定 g++ 编译器只进行预处理而不进行后续的 3 个阶段；-o 选项用于指定生成文件的名称。Linux 系统中，通常用 ".i" 作为 C++ 程序预处理后所得文件的后缀名。
（2）编译阶段，即对预处理阶段得到的 -i 文件做进一步的语法分析，生成相应的汇编代码文件。
命令：g++ -S main.i -o main.s
其中，-S 选项用于限定 g++ 编译器对指定文件进行编译，得到的汇编代码文件通常以“.s”作为后缀名。感兴趣的读者可以使用 cat 命令查看生成文件的内容。
（3）汇编阶段，即将汇编代码文件转换成可以执行的机器指令。
命令：g++ -c main.s -o main.o
-c 指令用于限定 g++ 编译器只进行汇编操作，最终生成的目标文件（本质就是二进制文件，但还无法执行）通常以“.o”作为后缀名。
（4）链接阶段，即将所有的目标文件组织成一个可以执行的二进制文件。
命令：g++ main.o student.o -o student.exe
注意，如果不用 -o 指定可执行文件的名称，默认情况下会生成 a.out 可执行文件。Linux 系统并不以文件的扩展名开分区文件类型，所以 a.out 和 student.exe 都是可执行文件，只是文件名称有区别罢了。
以上 4 个阶段中，文件的生成不分先后，只要保证所有源文件都得到处理即可。
执行程序：./student.exe，注意“./”表示当前目录，不能省略。









STL

六大部件Components
容器Containers、算法Algorithms、分配器Allocators、迭代器Iterators、仿函数Functors、适配器Adapters
（数据结构、基础算法、分配内存、容器与算法的指针、基础运算和逻辑操作、各个器件的接口实现）
作用或地位：容器基于分配器，算法基于仿函数，容器与算法的连接基于迭代器，适配器解决这三类过程的接口适配问题







